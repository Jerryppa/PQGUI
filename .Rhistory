DIR_legend_list
DIR_legend_list <- as.character(mapply(function(a,b) paste0(rev(strsplit(a,"[/]")[[1]])[1]," (N=",b,")"), DIR_list,Nd_list))
res<-ggplot(data = data_for_boxplot, aes(x = factor(pathogen), y =etiology,
fill = factor(model))) +
#geom_boxplot(width = 0.8) +
labs(list(x = "pathogen", y = "etiology"))+theme_bw()+
theme(axis.text.x  = element_text(angle=90, size=16),
axis.title  = element_text(size=16,face="bold"))+
stat_summary(fun.data = f, geom="boxplot",aes(width=0.8),
position=position_dodge(.8))+
stat_summary(fun.data = mean_with_nm,geom="point",aes(size=1.5),
position=position_dodge(.8))+scale_size(guide = 'none')+
scale_fill_discrete(name="Model",
breaks=1:n_model,
labels=c(DIR_legend_list))+
theme(legend.text = element_text(colour="blue",
size = 16, face = "bold"),
legend.title = element_text(size=16,face="bold"),
legend.position = "top")+
stat_summary(fun.data = mean_with_nm_txt,geom="text",
aes(angle=90),
position = position_dodge(width = 0.8))+ylim(0,ymax)+
geom_vline(xintercept=viral_line_pos+.5,linetype = "longdash")+#separate virus and bacteria.
geom_vline(xintercept=viral_line_pos+bacterial_line_pos+.5,linetype = "longdash")+#separate virus and bacteria.
geom_vline(xintercept=length(union_aligned)+.5,size=1.5)
res <- res+ annotate("text", label = "viral", x = viral_line_pos/2,
y = ymax*3/4, size = 10, colour = "black")+
annotate("text", label = "bacterial", x = (viral_line_pos+bacterial_line_pos/2),
y = ymax*3/4, size = 10, colour = "black")+
annotate("text", label = "other", x = (viral_line_pos+bacterial_line_pos+other_line_pos/2),
y = ymax*3/4, size = 10, colour = "black")
res
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
result.folder <- "C:/PQGUI/PQGUI_Str_H123A1234C12345_Adj__Mod_E1B1S1C1"
m.file<- "model_NoReg_BrS_nplcm.bug"
file.copy(paste0("bugs/",m.file), paste0(result.folder,"/",m.file), overwrite = recursive, recursive = FALSE,
copy.mode = TRUE)
file.copy(paste0("bugs/",m.file), paste0(result.folder,"/",m.file), overwrite = T, recursive = FALSE,
copy.mode = TRUE)
result.folder <- "C:/PQGUI/PQGUI_Str_H123A1234C12345_Adj__Mod_E1B1S1C1"
file.copy(paste0("bugs/",m.file), paste0(result.folder,"/",m.file), overwrite = T, recursive = FALSE,
copy.mode = TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
Res.dir
Res.dir <- "C:\PQGUI\PQGUI_Str_H123A1234C12345_Adj__Mod_E1B1S1C1"
Res.dir <- "C:/PQGUI/PQGUI_Str_H123A1234C12345_Adj__Mod_E1B1S1C1"
list.dirs(path = Res.dir,full.names = F,recursive = F)
list.files(path = Res.dir,full.names = F,recursive = F)
res_files <- list.files(path = Res.dir,full.names = F,recursive = F)
if (!any(res_files == "Music_Plot.pdf")){
cat("==Start Plotting Music Plots in ==","\n",result.folder)
pdf(paste0(Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=Res.dir,
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
dev.off()
Message_op <- paste0("Result folder for requested model exists, Music plot can be found in <em>C:/PQGUI/",
Res.dir,"</em>")
} else {
Message_op <- paste0("Result folder for requested model exists, Music plot can be found in <em>C:/PQGUI/",
Res.dir,"</em>")
}
if (!any(res_files == "Music_Plot.pdf")){
cat("==Start Plotting Music Plots in ==","\n",result.folder)
pdf(paste0(Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=Res.dir,
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
dev.off()
Message_op <- paste0("Result folder for requested model exists, Music plot can be found in <em>C:/PQGUI/",
Res.dir,"</em>")
} else {
Message_op <- paste0("Result folder for requested model exists, Music plot can be found in <em>C:/PQGUI/",
Res.dir,"</em>")
}
res_files
res_files <- list.files(path = Res.dir,full.names = F,recursive = F)
if (!any(res_files == "Music_Plot.pdf")){
cat("==Start Plotting Music Plots in ==","\n",Res.dir)
pdf(paste0(Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=Res.dir,
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
dev.off()
Message_op <- paste0("Result folder for requested model exists, Music plot can be found in <em>C:/PQGUI/",
Res.dir,"</em>")
} else {
Message_op <- paste0("Result folder for requested model exists, Music plot can be found in <em>C:/PQGUI/",
Res.dir,"</em>")
}
shiny::runApp()
paste0(Res.dir,"/","Music_Plot.pdf")
res_files <- list.files(path = Res.dir,full.names = F,recursive = F)
if (!any(res_files == "Music_Plot.pdf")){
cat("==Start Plotting Music Plots in ==","\n",Res.dir)
pdf(paste0(Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=Res.dir,
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
dev.off()
Message_op <- paste0("Result folder for requested model exists, Music plot can be found in <em>C:/PQGUI/",
Res.dir,"</em>")
} else {
Message_op <- paste0("Result folder for requested model exists, Music plot can be found in <em>C:/PQGUI/",
Res.dir,"</em>")
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tagList
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
DIR_list="C:/PQGUI/PQGUI_Str_H1A1234C123_Adj__Mod_E1B1S1C1"
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv"
pathogen_displayorder_lookup <- read.csv(DIR_pathogen_displayorder_lookup)
f <- pathogen_displayorder_lookup$Pathogen
display_order <- as.character(levels(f))[f]
## read in data from result directories:
bugs.dat_list <- list()
model_options_list <- list()
pathogen_list <- list()
pick_list     <- list()
Jfull_BrS     <- list()
Jfull         <- list()
pEti_mat   <- list()
pEti_mean  <- list()
pEti_mean0 <- list()
pathogen_names<- list()
Nd_list <- list()#WF for sample size label
pathogen_names_union <- "INITIAL"
for (i in seq_along(DIR_list)){
bugs.dat <- dget(paste(DIR_list[[i]],"data.txt",sep="/"))
for (bugs.variable.name in names(bugs.dat)) {
if (!is.null(dim(bugs.dat[[bugs.variable.name]]))) {
dim(bugs.dat[[bugs.variable.name]]) <- rev(dim(bugs.dat[[bugs.variable.name]]))
bugs.dat[[bugs.variable.name]] <- aperm(bugs.dat[[bugs.variable.name]])
}
assign(bugs.variable.name, bugs.dat[[bugs.variable.name]])
}
bugs.dat_list[[i]] <- bugs.dat
rm("bugs.dat")
model_options_list[[i]]  <- dget(paste(DIR_list[[i]],"model_options.txt",sep="/"))
#WF
pathogen_list[[i]]     <- model_options_list[[i]]$cause_list
Jfull[[i]]        <- length(pathogen_list[[i]])
#reading nplcm outputs:
res_nplcm <- read.coda(paste(DIR_list[[i]],"coda1.txt",sep="/"),
paste(DIR_list[[i]],"codaIndex.txt",sep="/"),
quiet=TRUE)
Nd_list[[i]] = bugs.dat_list[[i]]$Nd
#WF
if (is.null(model_options_list[[i]]$X_reg_FPR)){
#Jfull[[i]] <- length(grep("pEti",colnames(res_nplcm)))
# extract and process some data and posterior samples:
SubVarName <- rep(NA,Jfull[[i]])
for (j in 1:Jfull[[i]]){
SubVarName[j] = paste("pEti","[",j,"]",sep="")
}
pEti_raw = res_nplcm[,SubVarName]
} else {
N_grp=bugs.dat_list[[i]]$N_grp
grp_info=model_options_list[[i]]$grp_info
#Jfull[[i]]=length(grep("pEti",colnames(res_nplcm)))/N_grp
#WF
VarName <- rep(NA,Jfull[[i]])
for (j in 1:Jfull[[i]]){
VarName[j] = paste("pEti","[",j,"]",sep="")
}
pEti_raw=matrix(0,dim(res_nplcm)[1],Jfull[[i]])
colnames(pEti_raw)=VarName
for (j in 1:Jfull[[i]]){
for (l in 1:dim(grp_info)[1]){
k=grp_info$Var1[l]
tmpname = paste("pEti","[",k,",",j,"]",sep="")
pEti_raw[,j]=pEti_raw[,j]+res_nplcm[,tmpname]*grp_info$Freq[grp_info$Var1==k]/Nd_list[[i]]
}
}
}
#get etiology fraction MCMC samples:
pEti_mat[[i]]   <- pEti_raw
pEti_mean[[i]]  <- colMeans(pEti_mat[[i]])
pEti_mean0[[i]] <- pEti_mean[[i]]
pathogen_names[[i]] <- model_options_list[[i]]$cause_list
#         order_tmp <- rep(NA,length(pathogen_names[[i]]))
#
#         incre <- 0
#         for (j in seq_along(display_order)){
#           if (display_order[j]%in% pathogen_names[[i]]){
#             incre <- incre + 1
#             order_tmp[incre] <- which(pathogen_names[[i]]==display_order[j])
#           }
#         }
#         order_list[[i]] <- order_tmp
pathogen_names_union <- union(pathogen_names_union,pathogen_names[[i]])
}
pathogen_names_union <- pathogen_names_union[-grep("INITIAL",pathogen_names_union)]
pathogen_names_union <- sort(pathogen_names_union)
# a function to match each model's result to the desired order:
lookup <- function(disp_order, union_nm, nm_list){
ord_union <- rep(NA,length(union_nm))
incre <- 0
for (j in seq_along(disp_order)){
if (disp_order[j]%in% union_nm){
incre <- incre + 1
ord_union[incre] <- which(union_nm==disp_order[j])
}
}
pick_order <- union_nm[ord_union]
res <- list()
for (i in seq_along(nm_list)){
res[[i]] <- rep(NA,length(pick_order))
for (j in 1:length(pick_order)){
if (pick_order[j]%in%nm_list[[i]]){
res[[i]][j] <- which(nm_list[[i]]==pick_order[j])
}
}
}
list(model_res=res, union_res = pick_order)
}
#   disp_order <- c("B","E","D","C","F","A")
#   union_nm   <- c("A","B","C","D","E")
#   nm_list <-list(c("C","E"),
#                  c("D","B"),
#                  c("C","A","E"))
#   lookup(disp_order,union_nm,nm_list)
lookup_res <- lookup(display_order,pathogen_names_union,pathogen_list)
pick_list <- lookup_res$model_res
union_aligned<- lookup_res$union_res
combine_data_for_boxplot <- function(pEti_mat,pick_list){
tmp <- list()
for (i in seq_along(pEti_mat)){
part1 <- as.data.frame(pEti_mat[[i]][,pick_list[[i]]])
picked_names <- pathogen_list[[i]][pick_list[[i]]]
#             colnames(part1) <- paste( formatC(1:length(picked_names), width=3, flag="0"),
#                                       picked_names, sep="_")
picked_names[is.na(picked_names)]="NoA"
colnames(part1) <- picked_names
picked_name_temp= picked_names
ind_category <- sapply(1:length(picked_name_temp),function(j)
which(display_order==picked_name_temp[j]))
vec_category <- as.character(pathogen_displayorder_lookup$Category[ind_category])
viral_line_pos <- sum(vec_category=="virus") # draw a line right to this number.
bacterial_line_pos <- sum(vec_category=="bacterium") # draw a line right to this number.
other_line_pos <- sum(vec_category=="other") # draw a line right to this number.
part1$viral     <- apply(part1,1,function(v) sum(v[1:viral_line_pos]))
part1$bacterial <- apply(part1,1,function(v) sum(v[(viral_line_pos+1):(viral_line_pos+bacterial_line_pos)]))
part1$other <- apply(part1,1,function(v) sum(v[(viral_line_pos+bacterial_line_pos+1):(viral_line_pos+bacterial_line_pos+other_line_pos)]))
tmp[[i]] <- reshape(part1,
idvar = "iteration",
ids = rownames(part1),
times = colnames(part1),
timevar = "pathogen",
varying = colnames(part1),
v.names = "etiology",
direction="long")
tmp[[i]]$model <- i
tmp[[i]]$pathogen <- factor(tmp[[i]]$pathogen,c(picked_names,"viral","bacterial","other"))
}
res <- do.call("rbind", tmp)
}
data_for_boxplot <- combine_data_for_boxplot(pEti_mat,pick_list)
ind_category <- sapply(1:length(union_aligned),function(j)
which(display_order==union_aligned[j]))
vec_category <- as.character(pathogen_displayorder_lookup$Category[ind_category])
viral_line_pos <- sum(vec_category=="virus") # draw a line right to this number.
bacterial_line_pos <- sum(vec_category=="bacterium")
other_line_pos <- sum(vec_category=="other")
## combine them into the display:
## ggplot2:
f <- function(x) {
r <- quantile(x, probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
mean_with_nm <- function(x){
r <- rep(mean(x),2)
names(r)<-c("y","ymax")
r}
mean_with_nm_txt <- function(x){
r <- c(ifelse(max(x)-quantile(x,.97)>0.02,quantile(x,.97)+0.02,max(x)),
round(mean(x),3),round(mean(x),3)*100)
names(r)<-c("y","ymax","label")
r
}
n_model <- length(DIR_list)
DIR_legend_list <- as.character(mapply(function(a,b) paste0(rev(strsplit(a,"[/]")[[1]])[1]," (N=",b,")"), DIR_list,Nd_list))
ymax <- max(data_for_boxplot$etiology)
text_df <-data.frame(pathogen =c(viral_line_pos/2,viral_line_pos+(length(union_aligned)-viral_line_pos)/2),
etiology = c(1,1),
label = c("viral","bacterial"),
model = c(1, 1))
res<-ggplot(data = data_for_boxplot, aes(x = factor(pathogen), y =etiology,
fill = factor(model))) +
#geom_boxplot(width = 0.8) +
labs(list(x = "pathogen", y = "etiology"))+theme_bw()+
theme(axis.text.x  = element_text(angle=90, size=16),
axis.title  = element_text(size=16,face="bold"))+
stat_summary(fun.data = f, geom="boxplot",aes(width=0.8),
position=position_dodge(.8))+
stat_summary(fun.data = mean_with_nm,geom="point",aes(size=1.5),
position=position_dodge(.8))+scale_size(guide = 'none')+
scale_fill_discrete(name="Model",
breaks=1:n_model,
labels=c(DIR_legend_list))+
theme(legend.text = element_text(colour="blue",
size = 16, face = "bold"),
legend.title = element_text(size=16,face="bold"),
legend.position = "top")+
stat_summary(fun.data = mean_with_nm_txt,geom="text",
aes(angle=90),
position = position_dodge(width = 0.8))+ylim(0,ymax)+
geom_vline(xintercept=viral_line_pos+.5,linetype = "longdash")+#separate virus and bacteria.
geom_vline(xintercept=viral_line_pos+bacterial_line_pos+.5,linetype = "longdash")+#separate virus and bacteria.
geom_vline(xintercept=length(union_aligned)+.5,size=1.5)
res <- res+ annotate("text", label = "viral", x = viral_line_pos/2,
y = ymax*3/4, size = 10, colour = "black")+
annotate("text", label = "bacterial", x = (viral_line_pos+bacterial_line_pos/2),
y = ymax*3/4, size = 10, colour = "black")+
annotate("text", label = "other", x = (viral_line_pos+bacterial_line_pos+other_line_pos/2),
y = ymax*3/4, size = 10, colour = "black")
res
Res.dir <- "C:/PQGUI/PQGUI_Str_H1A1234C123_Adj__Mod_E1B1S1C1"
pdf(paste0("C:/PQGUI/",Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=Res.dir,
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
dev.off()
nplcm_plot_etiology_music_sheet(DIR_list=Res.dir,
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
pdf(paste0("C:/PQGUI/","PQGUI_Str_H1A1234C123_Adj__Mod_E1B1S1C1","/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=Res.dir,
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
dev.off()
shiny::runApp()
dev.off()
dev.off()
dev.off()
shiny::runApp()
dev.off()
pdf(paste0("C:/PQGUI/",Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=paste0("C:/PQGUI/",Res.dir),
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
dev.off()
Res.dir
Res.dir <- "PQGUI_Str_H1A1234C123_Adj__Mod_E1B1S1C1"
pdf(paste0("C:/PQGUI/",Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=paste0("C:/PQGUI/",Res.dir),
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
dev.off()
shiny::runApp()
shiny::runApp()
Res.dir
pdf(paste0("C:/PQGUI/",Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=paste0("C:/PQGUI/",Res.dir),
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
#plot(1:10,1:10)
dev.off()
ggplot(1:10)
ggplot(template)
shiny::runApp()
Res.dir <- "PQGUI_Str_H1A1234C123_Adj__Mod_E1B1S1C1"
pdf(paste0("C:/PQGUI/",Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=paste0("C:/PQGUI/",Res.dir),
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
#plot(1:10,1:10)
dev.off()
shiny::runApp()
View(data_for_boxplot)
shiny::runApp()
shiny::runApp()
base_dir <- list.dirs(path = "C:/",full.names = F,recursive = F)
base_dir
res_dir <- list.dirs(path = "C:/PQGUI",full.names = F,recursive = F)
res_dir
res_files <- list.files(path = Res.dir,full.names = F,recursive = F)
res_files
res_files <- list.files(path = paste0("C:/PQGUI/",Res.dir),full.names = F,recursive = F)
res_files
dev.off()
shiny::runApp()
pdf(paste0("C:/PQGUI/",Res.dir,"/","Music_Plot.pdf"),width=20,height=10)
nplcm_plot_etiology_music_sheet(DIR_list=paste0("C:/PQGUI/",Res.dir),
DIR_pathogen_displayorder_lookup="data/pathogen_displayorder_lookup.csv")
#plot(1:10,1:10)
dev.off()
shiny::runApp()
clean_options <- list (case_def           =  "CXRFIN_5",
case_def_val       =  1,
ctrl_def           =  "CASECONT",
ctrl_def_val       =  2,
X_strat            =  c("newSITE","HIV_3","AGECAT"),
X_strat_val        =  list(sitename,1,1),
pathogen_BrS_anyorder =  pathogen_BrS_anyorder,
pathogen_SSonly    =  pathogen_SSonly,
# covariates besides case/control:
X_extra            = c("newSITE","ENRLDATE","patid","AGECAT","HIV"),
# coverates for separately ordering cases/controls:
X_order_obs        = c("newSITE","ENRLDATE","AGECAT","HIV"),
RawMeasDir         = paste0("data/PQ_SAF_14MAY15.csv"),
write_newSite      = TRUE,
newSite_write_Dir  = paste0("data/PERCH_data_with_newSITE.csv"),
MeasDir            = paste0("data/PERCH_data_with_newSITE.csv"),
PathCatDir         = paste0("data/pathogen_category.csv"),
allow_missing      = T)
clean_options <- list (case_def           =  "CXRFIN_5",
case_def_val       =  1,
ctrl_def           =  "CASECONT",
ctrl_def_val       =  2,
X_strat            =  c("newSITE","HIV_3","AGECAT"),
X_strat_val        =  list("05SAF",1,1),
pathogen_BrS_anyorder =  pathogen_BrS_anyorder,
pathogen_SSonly    =  pathogen_SSonly,
# covariates besides case/control:
X_extra            = c("newSITE","ENRLDATE","patid","AGECAT","HIV"),
# coverates for separately ordering cases/controls:
X_order_obs        = c("newSITE","ENRLDATE","AGECAT","HIV"),
RawMeasDir         = paste0("data/PQ_SAF_14MAY15.csv"),
write_newSite      = TRUE,
newSite_write_Dir  = paste0("data/PERCH_data_with_newSITE.csv"),
MeasDir            = paste0("data/PERCH_data_with_newSITE.csv"),
PathCatDir         = paste0("data/pathogen_category.csv"),
allow_missing      = T)
## get cleaned data:
cleaned_data <- perch_data_clean(clean_options)
pathogen_BrS_anyorder  <- c("BOPE","C_PNEU","M_PNEU",
"PCP","ADENO","CMV","COR",#WF
"FLU_C","HBOV","HMPV_A_B",
"FLU_A","FLU_B",
"PARA_1","PARA_2","PARA_3","PARA_4",
"PV_EV","RHINO","RSV",#without SS measure.
"HINF","MCAT","PNEU_VT13","PNEU_NOVT13",
"SASP","SAUR")#with SS measures.
pathogen_SSonly  <- c("ENTRB","NFGNR","FUNGI","HAEMO","OTHSTR","NMEN","TB")
clean_options <- list (case_def           =  "CXRFIN_5",
case_def_val       =  1,
ctrl_def           =  "CASECONT",
ctrl_def_val       =  2,
X_strat            =  c("newSITE","HIV_3","AGECAT"),
X_strat_val        =  list("05SAF",1,1),
pathogen_BrS_anyorder =  pathogen_BrS_anyorder,
pathogen_SSonly    =  pathogen_SSonly,
# covariates besides case/control:
X_extra            = c("newSITE","ENRLDATE","patid","AGECAT","HIV"),
# coverates for separately ordering cases/controls:
X_order_obs        = c("newSITE","ENRLDATE","AGECAT","HIV"),
RawMeasDir         = paste0("data/PQ_SAF_14MAY15.csv"),
write_newSite      = TRUE,
newSite_write_Dir  = paste0("data/PERCH_data_with_newSITE.csv"),
MeasDir            = paste0("data/PERCH_data_with_newSITE.csv"),
PathCatDir         = paste0("data/pathogen_category.csv"),
allow_missing      = T)
## get cleaned data:
cleaned_data <- perch_data_clean(clean_options)
library(nplcm)
cleaned_data <- perch_data_clean(clean_options)
shiny::runApp()
?rowMax
?rowMeans
?rowMaxes
PQGUI_dataset<- read.csv("data/PQ_SAF_14MAY15.csv")
out_list[[3]] <- c(1,2,3,7)
temp <- c(1,2,5,6)
PQGUICXR_data <- PQGUI_dataset[,c("airspace","interstitial","cld","lymphadenop",
"pleural","airtrap","cardiomeg","WHOENDPOINT","OTHERINFILONLY")][,temp]
PQGUI_dataset$PQGUI_CXR = apply(PQGUICXR_data,1,Max)
?max
PQGUI_dataset$PQGUI_CXR = apply(PQGUICXR_data,1,max)
View(PQGUI_dataset)
head(PQGUI_dataset$PQGUI_CXR)
max(1,NA)
PQGUI_dataset$PQGUI_CXR = apply(PQGUICXR_data,1,max(na.rm=T))
PQGUI_dataset$PQGUI_CXR = apply(PQGUICXR_data,1,function(x) max(x,na.rm=T))
PQGUI_dataset$PQGUI_CXR = apply(PQGUICXR_data,1,function(x) max(x,na.rm=T))
warning()
PQGUI_dataset$PQGUI_CXR = apply(PQGUICXR_data,1,function(x) max(x,na.rm=TRUE))
head(PQGUI_dataset$PQGUI_CXR)
shiny::runApp()
table(PQGUI_dataset$X_AGECAT)
shiny::runApp()
shiny::runApp()
PQGUICXR_data <- PQGUI_dataset[,c("airspace","interstitial","cld","lymphadenop",
"pleural","airtrap","cardiomeg","WHOENDPOINT","OTHERINFILONLY")][,9]
PQGUI_dataset$PQGUI_CXR = apply(PQGUICXR_data,1,max)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dev.off()
