{
    "contents" : "SIM_FUN <-function (TPR_prior,Eti_prior,simdata){\n  Mobs         <- simdata$Mobs\n  #Mobs[[\"MBS\"]][\"D_NPPCR\"]=rep(NA,length(Mobs[[\"MBS\"]][\"D_NPPCR\"]))\n  #Mobs[[\"MSS\"]][\"C_BCX\"]=rep(NA,length(Mobs[[\"MSS\"]][\"C_BCX\"]))\n  Y            <- simdata$Y\n  X            <- NULL\n  pathogen_cat <- NULL\n  JSS          <- NULL\n  pathogen_SSonly_cat <- NULL\n  JSSonly             <- NULL\n  pathogen_BrS        <- c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\") \n  #SS+BrS\n  pathogen_B_S <- c(\"B\",\"D\",\"E\",\"G\")\n  pathogen_BrS_ord <- c(pathogen_B_S,pathogen_BrS[!(pathogen_BrS %in% pathogen_B_S)])\n  ord_BrS <- unlist(lapply(pathogen_BrS_ord, function(x) which(pathogen_BrS==x)))\n  ord_SS <- unlist(lapply(pathogen_B_S, function(x) which(pathogen_BrS==x)))\n  \n  pathogen_SSonly <- NULL\n  \n  #order Mobs\n  Mobs <- list(MBS=Mobs[[1]][,ord_BrS],MSS=Mobs[[2]][,ord_BrS])\n  # the pathogen name order associated with cleaned data; \n  # could be different from the order we want to display.\n  \n  # The list of causes, can be singleton, combinations, or NoA.\n  # Please take a look at 'pathogen_BrS' before specifying this list:\n  \n  cause_list  <- c(pathogen_BrS_ord,pathogen_SSonly    # singleton causes in pathogen_SSonly.\n                   # any combinations\n                   ,\"NoA\")\n  \n  # always specify \"NOA\" last if it goes into model.\n  \n  \n  # specify model fitting options (see nplcm function for details):\n  model_options <- list(M_use = c(\"BrS\",\"SS\"),\n                        # has to be a subset of non-NA entries in Mobs.\n                        k_subclass = 1,\n                        TPR_prior  = TPR_prior,\n                        #same length as M_use.\n                        Eti_prior  = Eti_prior,\n                        pathogen_BrS_list = pathogen_BrS_ord,\n                        cause_list  = cause_list,\n                        X_reg_FPR = NULL,\n                        X_reg_Eti = NULL, #change the FPR_regression, and Eti_regressions to NULL values.\n                        pathogen_cat = NULL,\n                        SSonly       = NULL,\n                        pathogen_SSonly_list = NULL)\n  \n  working_dir =\"C:\\\\\"\n  Date     <- gsub(\"-\", \"_\", Sys.Date())\n  fname    <- paste0(working_dir,Date,\"_\",\"SIM_TEST\")\n  dir.create(fname)\n  Scenario <- \"TEST\"\n  Num <- NULL\n  expname =  paste0(c(Scenario,paste0(c(model_options$Eti_prior,model_options$TPR_prior),collapse=\"\")),collapse=\"_\")\n  fullname <- paste0(fname,\"\\\\\",expname,\"\\\\\",\"DataSet\",Num)\n  \n  ## for finer scenarios\n  result.folder <- fullname\n  dir.create(result.folder,recursive=T)\n  \n  \n  # options for MCMC chains:\n  mcmc_options <- list(debugstatus = !TRUE,\n                       n.chains   = 1,\n                       n.itermcmc = 1000,\n                       n.burnin   = 500,\n                       n.thin     = 5,\n                       individual.pred = TRUE,\n                       ppd             = TRUE,\n                       result.folder = result.folder,\n                       bugsmodel.dir = \"C:\\\\PQ_MODEL\\\\winbugs_model_package\\\\\",\n                       winbugs.dir   = \"C:\\\\Program Files\\\\WinBUGS14\\\\\")\n  \n  #\n  # Record the settings of current analysis:\n  #\n  cat(\"==Results stored in: ==\",\"\\n\",result.folder)\n  #model_options:\n  dput(model_options,paste0(mcmc_options$result.folder,\"\\\\model_options.txt\"))\n  #mcmc_options:\n  dput(mcmc_options,paste0(mcmc_options$result.folder,\"\\\\mcmc_options.txt\"))\n  \n  \n  \n  call.bugs <- function(data, inits, parameters, m.file, bugsmodel.dir = mcmc_options$bugsmodel.dir, \n                        winbugs.dir = mcmc_options$winbugs.dir, nitermcmc = mcmc_options$n.itermcmc, \n                        nburnin = mcmc_options$n.burnin, nthin = mcmc_options$n.thin, \n                        nchains = mcmc_options$n.chains, dic = FALSE, is.debug = mcmc_options$debugstatus, \n                        workd = mcmc_options$result.folder, ...) {\n    m.file <- paste(bugsmodel.dir, m.file, sep = \"\")\n    f.tmp <- function() {\n      gs <- bugs(data, inits, parameters, model.file = m.file, \n                 working.directory = workd, n.chains = nchains, \n                 n.iter = nitermcmc, n.burnin = nburnin, n.thin = nthin, \n                 bugs.directory = winbugs.dir, DIC = dic, debug = is.debug, \n                 ...)\n      gs\n    }\n    bugs.try <- try(rst.bugs <- f.tmp(), silent = FALSE)\n    if (class(bugs.try) == \"try-error\") {\n      rst.bugs <- NULL\n    }\n    rst.bugs\n  }\n  parsing <- assign_model(Mobs, Y, X, model_options)\n  Nd <- sum(Y == 1)\n  Nu <- sum(Y == 0)\n  cat(\"==True positive rate (TPR) prior(s) for ==\\n\", model_options$M_use, \n      \"\\n\", \" is(are respectively): \\n\", model_options$TPR_prior, \n      \"\\n\")\n  cause_list <- model_options$cause_list\n  pathogen_BrS_list <- model_options$pathogen_BrS_list\n  pathogen_SSonly_list <- model_options$pathogen_SSonly_list\n  JBrS <- length(pathogen_BrS_list)\n  JSSonly <- length(pathogen_SSonly_list)\n  Jcause <- length(cause_list)\n  template <- rbind(as.matrix(rbind(symb2I(c(cause_list), c(pathogen_BrS_list, \n                                                            pathogen_SSonly_list)))), rep(0, JBrS + JSSonly))\n  MBS.case <- Mobs$MBS[Y == 1, ]\n  MBS.ctrl <- Mobs$MBS[Y == 0, ]\n  MBS <- as.matrix(rbind(MBS.case, MBS.ctrl))\n  MSS.case <- Mobs$MSS[Y == 1,]\n  MSS.case <- as.matrix(MSS.case)\n  SS_index <- which(colMeans(is.na(MSS.case)) < 0.9)\n  JSS <- length(SS_index)\n  MSS <- MSS.case[, SS_index]\n  # alpha <- eti_prior_set(model_options)\n  if (model_options$Eti_prior == \"E0\") {\n    alpha <- rep(0.125, 8)\n  } else if (model_options$Eti_prior == \"E1\") {\n    alpha <- c(0.3, 0.07,0.3,0.07,0.07,0.07,0.07,0.07)\n  } \n  # TPR   \n  if (model_options$TPR_prior[1] == \"TB0\") {\n    temp_param.BS <- beta_parms_from_quantiles(c(0.50,0.99), p = c(0.025, 0.975), plot = FALSE)   \n    alphaB <- rep(temp_param.BS$a,7)\n    betaB <-  rep(temp_param.BS$b,7)  \n  } else if (model_options$TPR_prior[1] == \"TB1\") {\n    alphaB <- rep(1,7)\n    betaB <-  rep(1,7)  \n  } \n  if (model_options$TPR_prior[2] == \"TS0\") {\n    temp_param.SS <- beta_parms_from_quantiles(c(0.10,0.20), p = c(0.025, 0.975), plot = FALSE)\n    alphaS <- rep(temp_param.SS$a,7)\n    betaS <-  rep(temp_param.SS$b,7)  \n  } else if (model_options$TPR_prior[2] == \"TS1\") {\n    temp_param.SS <- beta_parms_from_quantiles(c(0.01,0.20), p = c(0.025, 0.975), plot = FALSE)\n    alphaS <- rep(temp_param.SS$a,7)\n    betaS <-  rep(temp_param.SS$b,7)  \n  }\n  \n  if (parsing$measurement$SSonly) {\n    MSS.only.case <- Mobs$MSS[Y == 1, (1:JSSonly) + JBrS]\n    MSS.only <- as.matrix(MSS.only.case)\n    alphaS.only <- TPR_prior_list$alphaS.only\n    betaS.only <- TPR_prior_list$betaS.only\n  }\n  mybugs <- function(...) {\n    inits <- function() {\n      list(thetaBS = rbeta(JBrS, 1, 1), psiBS = rbeta(JBrS, \n                                                      1, 1))\n    }\n    data <- c(\"Nd\", \"Nu\", \"JBrS\", \"Jcause\", \"alpha\", \"template\", \n              \"MBS\", \"JSS\", \"MSS\", \"alphaB\", \"betaB\", \"alphaS\", \n              \"betaS\")\n    if (mcmc_options$individual.pred == FALSE & mcmc_options$ppd == \n          TRUE) {\n      parameters <- c(\"thetaBS\", \"psiBS\", \"pEti\", \"thetaSS\", \n                      \"MBS.new\")\n    } else if (mcmc_options$individual.pred == TRUE & mcmc_options$ppd == \n                 TRUE) {\n      parameters <- c(\"thetaBS\", \"psiBS\", \"pEti\", \"thetaSS\", \n                      \"Icat\", \"MBS.new\")\n    } else if (mcmc_options$individual.pred == TRUE & mcmc_options$ppd == \n                 FALSE) {\n      parameters <- c(\"thetaBS\", \"psiBS\", \"pEti\", \"thetaSS\", \n                      \"Icat\")\n    } else if (mcmc_options$individual.pred == FALSE & mcmc_options$ppd == \n                 FALSE) {\n      parameters <- c(\"thetaBS\", \"psiBS\", \"pEti\", \"thetaSS\")\n    }\n    rst.bugs <- call.bugs(data, inits, parameters, ...)\n    rst.bugs\n  }\n  if (mcmc_options$ppd == TRUE) {\n    gs <- mybugs(\"model_NoReg_BrSandSS_plcm_ppd.bug\")\n  } else {\n    gs <- mybugs(\"model_NoReg_BrSandSS_plcm.bug\")\n  }\n  \n  \n}\n\n#\n# Model checking:\n#\n\n# check the code for the combined visualization below in the old code:\n#\n# common patterns:\n\n#\n# pairwise log odds ratios:\n\n\n\n\n\n#\n# Posterior Analysis:\n#\n\n# ## Results visualization ------------------------------------------------\n# # plot 1: three-panel plot:\n#three_panel_height <- (nrow(pathogen_cat)+length(pathogen_SSonly))/2\n#pdf(paste0(result.folder,\"\\\\\",sitename,\"_three_panel_plot.pdf\"),\n#          width=12,height= three_panel_height)\n#nplcm_plot_three_panel(DIR_NPLCM = result.folder,ss_upperlimit = 1,eti_upperlimit = .5)\n#dev.off()\n#\n# # plot 2: individual diagnosis plot:\n# pdf(paste0(result.folder,\"\\\\\",sitename,\"_individual_diagnosis.pdf\"),width=16,height=16)\n# par(mfrow=c(4,4))\n# nplcm_plot_individual_diagnosis(DIR_NPLCM=result.folder,npat=16)\n# dev.off()\n#\n# # plot 3: pathogen group triangle plots:\n# result.folder  = \"C:/2014_10_30_02GAM_PNEU\"\n# pdf(paste0(result.folder,\"\\\\\",sitename,\"_group_triangle_plot.pdf\"),width=10,height=10)\n# nplcm_plot_group_etiology(DIR_NPLCM=result.folder)\n# dev.off()\n#\n# ## END of Results visualization -----------------------------------------------\n#\n#\n# # save workspace for future replot:\n# save.image(paste0(result.folder,\"\\\\for_replot.RDATA\"))\n#\n#\n",
    "created" : 1428524996956.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2350646159",
    "id" : "1403ACF",
    "lastKnownWriteTime" : 1428540345,
    "path" : "C:/Users/WFu/Google Drive/PERCH/2_PQ_MODEL/PQM_Project/PQGUI/SIM_FUN.R",
    "project_path" : "SIM_FUN.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}