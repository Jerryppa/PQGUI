{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\n\nshinyServer(\n  function(input, output) {\n    library(lubridate)\n    library(sets)\n    library(R2WinBUGS)\n    library(gplots)\n    library(RColorBrewer)\n    library(binom)\n    library(coda)\n    #library(nplcm)\n    \n    # for plot group etiologies posteriors:\n    #library(ks)\n    library(robCompositions)\n    \n    \n    source(\"SIM_DATA.R\")\n    source(\"SIM_FUN.R\")\n    \n    output$slider2 <- renderUI(sliderInput(\"slider2\", \"Choose Etiology Prior for Bacteria: \", min = 0,  max = 100 - input$slider1, value = 0))\n    \n    dataInput <- reactive({\n      set_parameter <- list(pathogen_BrS = c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\"),\n                                 cause_list=c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\"),\n                                 PsiBS=c(0.31,0.12,0.12,0.75,0.04,0.04,0.75,0.01,0.01,0.75),\n                                 ThetaBS=c(0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75),\n                                 PsiSS=c(NA,0,NA,0,0,NA,0,0,NA,0),\n                                 ThetaSS=c(NA,0.15,NA,0.15,0.15,NA,0.15,0.15,NA,0.15),\n                                 Nd=250,\n                                 Nu=250,\n                                 Lambda=NULL,\n                                 Eta=NULL,\n                                 etiology=c(0.37,0.15,0.15,0.15,0.05,0.05,0.05,0.01,0.01,0.01))\n      set.seed(20150331)\n      simdata <- SIM_DATA(set_parameter)\n      return(simdata)\n    })\n    \n    finalInput <- eventReactive(input$Go,{\n      message <- \"not run\"\n      if (input$EP==\"Weak Uniform Prior\" & input$TBP ==\"50%-100%\" & input$TSP==\"10%-20%\") {\n        #SIM_FUN(c(\"TB0\",\"TS0\"),\"E0\",dataInput())\n        message <- paste0(\"run\",input$EP)\n      }\n      return(message)\n      ####Add other options###\n    \n        \n    })\n      \n    #simdata<- SIM_DATA(set_parameter_S0C0D0)\n\n    output$text1 <- renderText({ \n\n      finalInput()\n      #count <- input$Submit\n\n\n    })\n\n    \n  }\n)\n",
    "created" : 1428670378909.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2465562205",
    "id" : "299B0D17",
    "lastKnownWriteTime" : 1429151368,
    "path" : "C:/Users/WFu/Google Drive/PERCH/2_PQ_MODEL/PQM_Project/PQGUI/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}